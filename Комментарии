'use strict';
- Всегда в начале документа
- Директива для подлючения тсрогого режима ES5. В IE8, она не работает, поэтому вероятность ошибок возрастает,
- Для этого есть библиотека ES5 shim, а именно – скрипты es5-shim.js и es5-sham.js из неё.
- Всегда писать при объявлении переменной ключевое слово 'var'
- изменения локальных переменных через параметры функции не осуществляется

Переменные
- Всегда писать при объявлении переменной ключевое слово 'var'
- Никакого транслита, только английский
- Короткие имена для местного назначения и их применение очевидно
- Имя соответствует хранимым данным
- Если мы ищем переменную с одним именем, а находим – с другим, то зачастую самый лучший ход – это переименовать переменную, чтобы имя было тем, которое вы искали

Тип данных
- NaN и Infinity - это числа
- undefined - тип undefined, значение не присвоено. Явно никогда не присваивают.
- undefined в число - NaN
- null - тип объект - это официально признанная ошибка в языке, которая сохраняется для совместимости, на самом деле тип одноименный null. Ознаает "ничего". Присваивают вместо undefined. Не определено или ничего.
- null == undefined
- null + undefined = NaN / ошибка - в strict mode
- null в число - 0
- (null > 0); // false
- (null == 0); // false
- (null >= 0); // true
- null > отрицательного числа
- Примитивные типы - string, number, boolean, null, undefined. Все кроме object
- typeof - результат строка
- function(){} - подвид объектов
- отрицательные числа в логическом типе равны true
- 0/0 - NaN
- ![] - false
- !![] - true
- [] + false = 'false'
- null + true = 1
- +'Infinity' = Infinity
- очеь мало цепочек proto
- нет свойств у null и undefined

Операторы
- Операнд, то к чему применяется оператор
- Унарный - к одному выражению (-x)
	- +(СТРОКА) - преобразует в число, обрезая пробелы
- Бинарный - к двум (x+y)
	- При сложение (+) со строкой, преобразуется в строку
	- Остальные операторы к числу
- Таблица приоритетов https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence
- alert() - возвращает undefined
- Тернарный оператор (?:), использует только синтаксические конструкции, который возвращают значение 
(нельзя использовать continue или break)


Сравнение
- Строки
	- Посимвольно
	- Строчные > Заглавных
	- Символ > чем ничего
	- Русские > английских
	- 
- Число 0, пустая строка "" (без пробела!), null и undefined, а также NaN являются false, Остальные значения – true.
- Приоритет у && больше, чем у ||
- ||
	- При этом оператор ИЛИ возвращает то значение, на котором остановились вычисления.
	- Причём, не преобразованное к логическому типу.
	- Если не одно значение не удовлетвояет, то возвращается последнее
- &&
	- Если левый аргумент – false, оператор И возвращает его и заканчивает вычисления.
	- Иначе – вычисляет и возвращает последний аргумент.
- !! - преобразование в логический тип
- true + true = 2 (число)

Циклы
- break - выход из цикла
- continue - прерывание цикла и сделать следующую итерацию
- break/conrinue ищет ближайший внешний цикл с такой меткой и переходит в его конец/итерацию
- метка ставится перед верхним циклом откуда хотим выйти или продолжить (exit:for(...){break exit;}) или перед ним
- если в switch нет break, при совпадении, остальные варианты (case) будут срабатывать
- case - сравнивает и по значению и по типу (===)
- Блоки if/else, switch, for, while, do..while не влияют на область видимости переменных.

Область видимости и функции
- Внешнюю переменную можно изменить внутри функции если она не объявляется заново в этой функции, иначе это разные переменные
- Фукнци без или с пустым return возвращает undefined
- Имя функции должно быть глаголом
- Одна функция – одно действие
– В функции не должно быть ничего, кроме самого действия и поддействий, неразрывно связанных с ним.
- Комментарии перед функцией 
	/** что делает 
	 * параметры @param {тип} переменная описание 
	 * @return {тип} что возвращае
	 */
- Функция без скобок на конце - просто код, со скобками - значение
- Function Declaration - a function declared in the main code stream.
- Function Expression - function declaration in the context of an expression, such as the assignment.
- // Function Declaration
	function sum(a, b) {
	  return a + b;
	}
	
	// Function Expression
	var sum = function(a, b) {
	  return a + b;
	}
- При 'use strict'; Function Declaration не будет видна внутри блока if
	if (age >= 18) {
	  function sayHi() {
	    alert( 'Прошу вас!' );
	  }
	}
	sayHi();
- Named Function Expression - присвоение имени функции выражения (var f = function name()) - для вызовы внутри себя рекурсии
- Никакие математические операции в JavaScript не могут привести к ошибке или «обрушить» программу. В худшем случае, результат будет NaN.
- isFinite(n) преобразует аргумент к числу и возвращает true, если это не NaN/Infinity/-Infinity - результат bool.

Рекурсия
- Базис рекурсии - на чем заканчивается вызов
- Глубина рекурсии - количество вызовов
- Контекст выполнения – это служебная информация, которая соответствует текущему запуску функции.
- При любом вложенном вызове JavaScript запоминает текущий контекст выполнения в специальной внутренней структуре данных – «стеке контекстов»
- Рекурсия приводит к хранению всех данных для неоконченных внешних вызовов в стеке, в данном случае это приводит к тому, что возведение в степень n хранит в памяти n различных контекстов.
- Любая рекурсия может быть переделана в цикл. Как правило, вариант с циклом будет эффективнее.
- Named Function Expression (NFE) - присвоение имени функции выражения (var f = function name()) - для вызовы внутри себя рекурсии - недоступно в IE8-

Отладка
- Можно останавливать отладчик с помозью браузера или debugger;
- console.dir() - структура

Тестирование
- библиотеки для тестирования mocha и chai
- TDD - test driven development - техника разработки программного обеспечения, которая основывается на повторении очень коротких циклов разработки: сначала пишется тест, покрывающий желаемое изменение, затем пишется код, который позволит пройти тест, и под конец проводится рефакторинг нового кода к соответствующим стандартам.
- BDD - behaviour driven development - 
- ошибка дли вывода в консоль throw new Error('');



